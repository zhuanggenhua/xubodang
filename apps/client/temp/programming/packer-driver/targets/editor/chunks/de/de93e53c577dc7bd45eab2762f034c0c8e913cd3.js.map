{"version":3,"sources":["file:///C:/Users/Admin/Desktop/zgh-temp/test/gtest/ctest/xubodang/apps/server/src/common/common/utils.ts"],"names":["RpcFunc","ProtoPathEnum","getProtoPathByRpcFunc","name","type","gap","deepClone","obj","res","Array","isArray","key","Object","prototype","hasOwnProperty","call"],"mappings":";;;;;;AAASA,MAAAA,O,gBAAAA,O;AAASC,MAAAA,a,gBAAAA,a;;;AAElB;AACA;AACA;uCACaC,qB,GAAwB,CACnCC,IADmC,EAEnCC,IAFmC,KAGhC;AACH;AACA,YAAID,IAAI,GAAGH,OAAO,CAACK,GAAnB,EAAwB;AACtB,iBAAOJ,aAAa,CAACE,IAAD,CAAb,CAAoBC,IAApB,CAAP;AACD,SAFD,MAEO;AACL,iBAAOH,aAAa,CAACE,IAAD,CAApB;AACD;AACF,O;;2BAEYG,S,GAAaC,GAAD,IAAc;AACrC,YAAI,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,KAAK,IAAvC,EAA6C;AAC3C,iBAAOA,GAAP;AACD;;AAED,cAAMC,GAAwB,GAAGC,KAAK,CAACC,OAAN,CAAcH,GAAd,IAAqB,EAArB,GAA0B,EAA3D;;AACA,aAAK,MAAMI,GAAX,IAAkBJ,GAAlB,EAAuB;AACrB,cAAIK,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,GAArC,EAA0CI,GAA1C,CAAJ,EAAoD;AAClDH,YAAAA,GAAG,CAACG,GAAD,CAAH,GAAWL,SAAS,CAACC,GAAG,CAACI,GAAD,CAAJ,CAApB;AACD;AACF;;AAED,eAAOH,GAAP;AACD,O","sourcesContent":["import { RpcFunc, ProtoPathEnum } from \"./enum\";\n\n/***\n * 根据消息类型获取生成coder需要的path\n */\nexport const getProtoPathByRpcFunc = (\n  name: RpcFunc,\n  type: \"req\" | \"res\"\n) => {\n  //小于gap是api，否则是msg\n  if (name < RpcFunc.gap) {\n    return ProtoPathEnum[name][type];\n  } else {\n    return ProtoPathEnum[name];\n  }\n};\n\nexport const deepClone = (obj: any) => {\n  if (typeof obj !== \"object\" || obj === null) {\n    return obj;\n  }\n\n  const res: Record<string, any> = Array.isArray(obj) ? [] : {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      res[key] = deepClone(obj[key]);\n    }\n  }\n\n  return res;\n};\n"]}