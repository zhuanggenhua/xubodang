{"version":3,"sources":["file:///C:/Users/Admin/Desktop/zgh-temp/test/gtest/ctest/xubodang/apps/client/assets/scripts/bg/skyCanvas.ts"],"names":["Star","_decorator","Component","Graphics","UITransform","v2","v3","ccclass","property","skyCanvas","graphics","stars","vp","fl","starsNumber","speed","easing","target","onLoad","getComponent","uiTransform","width","height","generateStars","i","x","Math","random","y","z","push","update","dt","clear","forEach","star","rotateX","rotateY","visible","draw3D","constructor","pos","scale","angle","cos","sin","fillRect"],"mappings":";;;wHAgDqBA,I;;;;;;;;;AAhDZC,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,Q,OAAAA,Q;AAAgBC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,E,OAAAA,E;AAAIC,MAAAA,E,OAAAA,E;;;;;;;;;OAC3D;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBP,U;;2BAGjBQ,S,WADZF,OAAO,CAAC,WAAD,C,gBAAR,MACaE,SADb,SAC+BP,SAD/B,CACyC;AAAA;AAAA;AAAA,eACvCQ,QADuC,GAClB,IADkB;AAAA,eAEvCC,KAFuC,GAEvB,EAFuB;AAAA,eAGvCC,EAHuC,GAG5BP,EAAE,CAAC,CAAD,EAAI,CAAJ,CAH0B;AAAA,eAIvCQ,EAJuC,GAI1B,CAJ0B;AAAA,eAKvCC,WALuC,GAKjB,IALiB;AAAA,eAMvCC,KANuC,GAMvB,MANuB;AAAA,eAOvCC,MAPuC,GAOtB,IAPsB;AAAA,eAQvCC,MARuC,GAQxBZ,EAAE,CAAC,CAAD,EAAI,CAAJ,CARsB;AAAA;;AAUvCa,QAAAA,MAAM,GAAG;AACP,eAAKR,QAAL,GAAgB,KAAKS,YAAL,CAAkBhB,QAAlB,CAAhB;AACA,gBAAMiB,WAAW,GAAG,KAAKD,YAAL,CAAkBf,WAAlB,CAApB;AACA,eAAKQ,EAAL,GAAUP,EAAE,CAACe,WAAW,CAACC,KAAZ,GAAoB,CAArB,EAAwBD,WAAW,CAACE,MAAZ,GAAqB,CAA7C,CAAZ;AACA,eAAKT,EAAL,GAAUO,WAAW,CAACC,KAAZ,GAAoB,CAA9B;AACA,eAAKE,aAAL;AACD;;AAEDA,QAAAA,aAAa,GAAG;AACd,gBAAMH,WAAW,GAAG,KAAKD,YAAL,CAAkBf,WAAlB,CAApB;;AACA,eAAK,IAAIoB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKV,WAAzB,EAAsCU,CAAC,EAAvC,EAA2C;AACzC,gBAAIC,CAAC,GAAGC,IAAI,CAACC,MAAL,KAAgB,CAAhB,GAAoBP,WAAW,CAACC,KAAhC,GAAwCD,WAAW,CAACC,KAA5D;AACA,gBAAIO,CAAC,GAAGF,IAAI,CAACC,MAAL,KAAgB,CAAhB,GAAoBP,WAAW,CAACE,MAAhC,GAAyCF,WAAW,CAACE,MAA7D;AACA,gBAAIO,CAAC,GAAGH,IAAI,CAACC,MAAL,KAAgB,IAAhB,GAAuB,GAA/B;AACA,iBAAKhB,KAAL,CAAWmB,IAAX,CAAgB,IAAI9B,IAAJ,CAASyB,CAAT,EAAYG,CAAZ,EAAeC,CAAf,EAAkB,KAAKjB,EAAvB,EAA2B,KAAKC,EAAhC,CAAhB;AACD;AACF;;AAEDkB,QAAAA,MAAM,CAACC,EAAD,EAAa;AACjB,eAAKtB,QAAL,CAAcuB,KAAd;AAEA,eAAKhB,MAAL,CAAYQ,CAAZ,IAAiB,KAAKT,MAAtB;AACA,eAAKC,MAAL,CAAYW,CAAZ,IAAiB,KAAKZ,MAAtB;AAEA,eAAKL,KAAL,CAAWuB,OAAX,CAAoBC,IAAD,IAAU;AAC3BA,YAAAA,IAAI,CAACC,OAAL,CAAa,KAAKnB,MAAL,CAAYQ,CAAzB;AACAU,YAAAA,IAAI,CAACE,OAAL,CAAa,KAAKpB,MAAL,CAAYW,CAAzB;;AACA,gBAAIO,IAAI,CAACG,OAAT,EAAkB;AAChBH,cAAAA,IAAI,CAACI,MAAL,CAAY,KAAK7B,QAAjB;AACD;AACF,WAND;AAOD;;AAzCsC,O;;yBA4CpBV,I,GAAN,MAAMA,IAAN,CAAW;AAOxBwC,QAAAA,WAAW,CAACf,CAAD,EAAYG,CAAZ,EAAuBC,CAAvB,EAAkCjB,EAAlC,EAA4CC,EAA5C,EAAwD;AAAA,eANnE4B,GAMmE,GANvDnC,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAMqD;AAAA,eALnEoC,KAKmE,GALrDrC,EAAE,CAAC,CAAD,EAAI,CAAJ,CAKmD;AAAA,eAJnEiC,OAImE,GAJhD,KAIgD;AAAA,eAHnE1B,EAGmE;AAAA,eAFnEC,EAEmE;AACjE,eAAK4B,GAAL,GAAWnC,EAAE,CAACmB,CAAD,EAAIG,CAAJ,EAAOC,CAAP,CAAb;AACA,eAAKjB,EAAL,GAAUA,EAAV;AACA,eAAKC,EAAL,GAAUA,EAAV;AACD;;AAEDuB,QAAAA,OAAO,CAACO,KAAD,EAAgB;AACrB,cAAIC,GAAG,GAAGlB,IAAI,CAACkB,GAAL,CAASD,KAAT,CAAV;AACA,cAAIE,GAAG,GAAGnB,IAAI,CAACmB,GAAL,CAASF,KAAT,CAAV;AACA,cAAIf,CAAC,GAAG,KAAKa,GAAL,CAASb,CAAT,GAAagB,GAAb,GAAmB,KAAKH,GAAL,CAASZ,CAAT,GAAagB,GAAxC;AACA,cAAIhB,CAAC,GAAG,KAAKY,GAAL,CAASZ,CAAT,GAAae,GAAb,GAAmB,KAAKH,GAAL,CAASb,CAAT,GAAaiB,GAAxC;AACA,eAAKJ,GAAL,CAASb,CAAT,GAAaA,CAAb;AACA,eAAKa,GAAL,CAASZ,CAAT,GAAaA,CAAb;AACD;;AAEDQ,QAAAA,OAAO,CAACM,KAAD,EAAgB;AACrB,cAAIC,GAAG,GAAGlB,IAAI,CAACkB,GAAL,CAASD,KAAT,CAAV;AACA,cAAIE,GAAG,GAAGnB,IAAI,CAACmB,GAAL,CAASF,KAAT,CAAV;AACA,cAAIlB,CAAC,GAAG,KAAKgB,GAAL,CAAShB,CAAT,GAAamB,GAAb,GAAmB,KAAKH,GAAL,CAASZ,CAAT,GAAagB,GAAxC;AACA,cAAIhB,CAAC,GAAG,KAAKY,GAAL,CAASZ,CAAT,GAAae,GAAb,GAAmB,KAAKH,GAAL,CAAShB,CAAT,GAAaoB,GAAxC;AACA,eAAKJ,GAAL,CAAShB,CAAT,GAAaA,CAAb;AACA,eAAKgB,GAAL,CAASZ,CAAT,GAAaA,CAAb;AACD;;AAEDU,QAAAA,MAAM,CAAC7B,QAAD,EAAqB;AACzB,cAAI,KAAK+B,GAAL,CAASZ,CAAT,GAAa,CAAC,KAAKhB,EAAvB,EAA2B;AACzB,gBAAI6B,KAAK,GAAG,KAAK7B,EAAL,IAAW,KAAKA,EAAL,GAAU,KAAK4B,GAAL,CAASZ,CAA9B,CAAZ;AACA,gBAAIJ,CAAC,GAAG,KAAKb,EAAL,CAAQa,CAAR,GAAY,KAAKgB,GAAL,CAAShB,CAAT,GAAaiB,KAAjC;AACA,gBAAId,CAAC,GAAG,KAAKhB,EAAL,CAAQgB,CAAR,GAAY,KAAKa,GAAL,CAASb,CAAT,GAAac,KAAjC;AACA,iBAAKJ,OAAL,GAAe,IAAf;AACA5B,YAAAA,QAAQ,CAACoC,QAAT,CAAkBrB,CAAlB,EAAqBG,CAArB,EAAwB,IAAI,KAAKc,KAAL,CAAWjB,CAAf,GAAmBiB,KAA3C,EAAkD,IAAI,KAAKA,KAAL,CAAWd,CAAf,GAAmBc,KAArE;AACD,WAND,MAMO;AACL,iBAAKJ,OAAL,GAAe,KAAf;AACD;AACF;;AAzCuB,O","sourcesContent":["import { _decorator, Component, Graphics, Node, UITransform, v2, v3, Vec2, Vec3 } from 'cc'\r\nconst { ccclass, property } = _decorator\r\n\r\n@ccclass('skyCanvas')\r\nexport class skyCanvas extends Component {\r\n  graphics: Graphics = null\r\n  stars: Star[] = []\r\n  vp: Vec2 = v2(0, 0)\r\n  fl: number = 0\r\n  starsNumber: number = 1500\r\n  speed: number = 0.0005\r\n  easing: number = 0.93\r\n  target: Vec2 = v2(0, 0)\r\n\r\n  onLoad() {\r\n    this.graphics = this.getComponent(Graphics)\r\n    const uiTransform = this.getComponent(UITransform)\r\n    this.vp = v2(uiTransform.width / 2, uiTransform.height / 2)\r\n    this.fl = uiTransform.width / 2\r\n    this.generateStars()\r\n  }\r\n\r\n  generateStars() {\r\n    const uiTransform = this.getComponent(UITransform)\r\n    for (let i = 0; i < this.starsNumber; i++) {\r\n      let x = Math.random() * 2 * uiTransform.width - uiTransform.width\r\n      let y = Math.random() * 2 * uiTransform.height - uiTransform.height\r\n      let z = Math.random() * 1000 - 500\r\n      this.stars.push(new Star(x, y, z, this.vp, this.fl))\r\n    }\r\n  }\r\n\r\n  update(dt: number) {\r\n    this.graphics.clear()\r\n\r\n    this.target.x *= this.easing\r\n    this.target.y *= this.easing\r\n\r\n    this.stars.forEach((star) => {\r\n      star.rotateX(this.target.x)\r\n      star.rotateY(this.target.y)\r\n      if (star.visible) {\r\n        star.draw3D(this.graphics)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport default class Star {\r\n  pos: Vec3 = v3(0, 0, 0)\r\n  scale: Vec2 = v2(1, 1)\r\n  visible: boolean = false\r\n  vp: Vec2\r\n  fl: number\r\n\r\n  constructor(x: number, y: number, z: number, vp: Vec2, fl: number) {\r\n    this.pos = v3(x, y, z)\r\n    this.vp = vp\r\n    this.fl = fl\r\n  }\r\n\r\n  rotateX(angle: number) {\r\n    let cos = Math.cos(angle)\r\n    let sin = Math.sin(angle)\r\n    let y = this.pos.y * cos - this.pos.z * sin\r\n    let z = this.pos.z * cos + this.pos.y * sin\r\n    this.pos.y = y\r\n    this.pos.z = z\r\n  }\r\n\r\n  rotateY(angle: number) {\r\n    let cos = Math.cos(angle)\r\n    let sin = Math.sin(angle)\r\n    let x = this.pos.x * cos - this.pos.z * sin\r\n    let z = this.pos.z * cos + this.pos.x * sin\r\n    this.pos.x = x\r\n    this.pos.z = z\r\n  }\r\n\r\n  draw3D(graphics: Graphics) {\r\n    if (this.pos.z > -this.fl) {\r\n      let scale = this.fl / (this.fl - this.pos.z)\r\n      let x = this.vp.x + this.pos.x * scale\r\n      let y = this.vp.y + this.pos.y * scale\r\n      this.visible = true\r\n      graphics.fillRect(x, y, 2 * this.scale.x * scale, 2 * this.scale.y * scale)\r\n    } else {\r\n      this.visible = false\r\n    }\r\n  }\r\n}\r\n"]}